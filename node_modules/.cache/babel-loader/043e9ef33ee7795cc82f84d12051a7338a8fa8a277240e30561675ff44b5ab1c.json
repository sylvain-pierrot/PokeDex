{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// import { generate } from '@vue/compiler-core'\nimport { createStore } from 'vuex';\nexport default createStore({\n  state() {\n    return {\n      language: \"fr\",\n      pokedex: new (require(\"pokeapi-js-wrapper\").Pokedex)({\n        cacheImages: true\n      }),\n      interval: {\n        offset: 0,\n        limit: 10\n      },\n      pokemons: [],\n      matchs: [],\n      colors: {\n        normal: '#A8A77A',\n        fire: '#EE8130',\n        water: '#6390F0',\n        electric: '#F7D02C',\n        grass: '#7AC74C',\n        ice: '#96D9D6',\n        fighting: '#C22E28',\n        poison: '#A33EA1',\n        ground: '#E2BF65',\n        flying: '#A98FF3',\n        psychic: '#F95587',\n        bug: '#A6B91A',\n        rock: '#B6A136',\n        ghost: '#735797',\n        dragon: '#6F35FC',\n        dark: '#705746',\n        steel: '#B7B7CE',\n        fairy: '#D685AD'\n      },\n      cacheNameList: []\n      // currentPokemon: []  \n    };\n  },\n\n  getters: {},\n  mutations: {\n    RESET_INTERVALE(state) {\n      state.interval.offset = 0;\n      state.interval.limit = 10;\n    },\n    UPDATE_INTERVALE(state) {\n      state.interval.offset += state.interval.limit;\n    },\n    EMPTY_POKEMONS(state) {\n      state.pokemons = [];\n    },\n    PUSH_POKEMONS(state, pokemons) {\n      state.pokemons.push(...pokemons);\n    },\n    PUSH_CURRENT_POKEMON(state, pokemon) {\n      state.currentPokemon = [pokemon];\n    },\n    PUSH_MATCHS(state, matchs) {\n      state.matchs = matchs;\n    },\n    SETUP_CACHE_NAMES(state, nameList) {\n      state.cacheNameList = nameList;\n    },\n    SETUP({\n      data,\n      value\n    }) {\n      data = value;\n    }\n  },\n  actions: {\n    async initCacheNames({\n      state,\n      commit,\n      dispatch\n    }) {\n      const pokeList = await state.pokedex.getPokemonSpeciesList();\n      const nameList = await Promise.all(pokeList.results.map(async poke => {\n        let pokeSpecies = await state.pokedex.getPokemonSpeciesByName(poke.name);\n        let tradName = await dispatch('findNameByLang', pokeSpecies.names);\n        return {\n          id: pokeSpecies.id,\n          name: poke.name,\n          traduction: tradName\n        };\n      }));\n      commit('SETUP_CACHE_NAMES', nameList);\n    },\n    findNameByLang({\n      state\n    }, names) {\n      let i = 0;\n      while (!(names[i].language.name === state.language)) {\n        i++;\n      }\n      return names[i].name;\n    },\n    async createPokemon({\n      state,\n      dispatch\n    }, name) {\n      const pokemon = {};\n      const poke = await state.pokedex.getPokemonByName(name);\n      const pokeSpecies = await state.pokedex.getPokemonSpeciesByName(name);\n\n      // id\n      const id = poke.id;\n      pokemon.id = id;\n      // name\n      pokemon.name = await dispatch('findNameByLang', pokeSpecies.names);\n      // types\n      const types = [];\n      for (const type of poke.types) {\n        let t = await state.pokedex.getTypeByName(type.type.name);\n        let tname = await dispatch('findNameByLang', t.names);\n        types.push(tname);\n      }\n      pokemon.types = types;\n      // color\n      const color = state.colors[poke.types[0].type.name];\n      pokemon.color = color;\n      // image\n      const image = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/dream-world/${id}.svg`;\n      pokemon.image = image;\n      return pokemon;\n    },\n    async generatePokemons({\n      state,\n      commit,\n      dispatch\n    }) {\n      const pokeList = await state.pokedex.getPokemonSpeciesList(state.interval);\n      const pokemons = await Promise.all(pokeList.results.map(async pokemon => {\n        return await dispatch('createPokemon', pokemon.name);\n      }));\n      commit('PUSH_POKEMONS', pokemons);\n      commit('UPDATE_INTERVALE');\n    },\n    async generatePokemonsBySearch({\n      state,\n      commit,\n      dispatch\n    }, search) {\n      commit('RESET_INTERVALE');\n      commit('SETUP', {\n        data: state.pokemons,\n        value: []\n      });\n      // commit('EMPTY_POKEMONS')\n      commit('PUSH_MATCHS', []);\n      if (!(search === '')) {\n        const filterNameList = state.cacheNameList.filter(poke => {\n          return poke.traduction.toLowerCase().includes(search.toLowerCase()) || parseInt(search) === poke.id;\n        });\n        const pokemons = await Promise.all(filterNameList.map(async poke => {\n          return await dispatch('createPokemon', poke.name);\n        }));\n        commit('PUSH_POKEMONS', pokemons);\n      } else {\n        dispatch('generatePokemons');\n      }\n    },\n    async generateMatchsPokemons({\n      commit,\n      state\n    }, search) {\n      if (search === '') {\n        commit('PUSH_MATCHS', []);\n      } else {\n        let matched = 0;\n        const matchs = state.cacheNameList.filter(name => {\n          return name.traduction.toLowerCase().includes(search.toLowerCase()) && matched++ < 10;\n        });\n        commit('PUSH_MATCHS', matchs);\n      }\n    }\n  },\n  modules: {}\n});","map":{"version":3,"names":["createStore","state","language","pokedex","require","Pokedex","cacheImages","interval","offset","limit","pokemons","matchs","colors","normal","fire","water","electric","grass","ice","fighting","poison","ground","flying","psychic","bug","rock","ghost","dragon","dark","steel","fairy","cacheNameList","getters","mutations","RESET_INTERVALE","UPDATE_INTERVALE","EMPTY_POKEMONS","PUSH_POKEMONS","push","PUSH_CURRENT_POKEMON","pokemon","currentPokemon","PUSH_MATCHS","SETUP_CACHE_NAMES","nameList","SETUP","data","value","actions","initCacheNames","commit","dispatch","pokeList","getPokemonSpeciesList","Promise","all","results","map","poke","pokeSpecies","getPokemonSpeciesByName","name","tradName","names","id","traduction","findNameByLang","i","createPokemon","getPokemonByName","types","type","t","getTypeByName","tname","color","image","generatePokemons","generatePokemonsBySearch","search","filterNameList","filter","toLowerCase","includes","parseInt","generateMatchsPokemons","matched","modules"],"sources":["/home/pierrots/Polytech/WOA/js/lab4/pokedex/src/store/index.js"],"sourcesContent":["// import { generate } from '@vue/compiler-core'\nimport { createStore } from 'vuex'\n\nexport default createStore({\n  state() {\n    return {\n      language: \"fr\",\n      pokedex: new (require(\"pokeapi-js-wrapper\")).Pokedex({ cacheImages: true }),\n      interval: { offset: 0, limit: 10 },\n      pokemons: [],\n      matchs: [],\n      colors: {\n          normal: '#A8A77A',\n          fire: '#EE8130',\n          water: '#6390F0',\n          electric: '#F7D02C',\n          grass: '#7AC74C',\n          ice: '#96D9D6',\n          fighting: '#C22E28',\n          poison: '#A33EA1',\n          ground: '#E2BF65',\n          flying: '#A98FF3',\n          psychic: '#F95587',\n          bug: '#A6B91A',\n          rock: '#B6A136',\n          ghost: '#735797',\n          dragon: '#6F35FC',\n          dark: '#705746',\n          steel: '#B7B7CE',\n          fairy: '#D685AD'\n      },\n      cacheNameList: []\n      // currentPokemon: []  \n    }\n  },\n  getters: {\n  },\n  mutations: {\n    RESET_INTERVALE(state) {\n      state.interval.offset = 0\n      state.interval.limit = 10\n    },\n    UPDATE_INTERVALE(state) {\n      state.interval.offset += state.interval.limit\n    },\n    EMPTY_POKEMONS(state) {\n      state.pokemons = []\n    },\n    PUSH_POKEMONS(state, pokemons) {\n      state.pokemons.push(...pokemons) \n    },\n    PUSH_CURRENT_POKEMON(state, pokemon) {\n      state.currentPokemon = [pokemon]\n    },\n    PUSH_MATCHS(state, matchs) {\n      state.matchs = matchs\n    },\n    SETUP_CACHE_NAMES(state, nameList) {\n      state.cacheNameList = nameList\n    },\n    SETUP({data, value}) {\n      data = value\n    }\n  },\n  actions: {\n    async initCacheNames({ state, commit, dispatch }) {\n      const pokeList = await state.pokedex.getPokemonSpeciesList()\n      const nameList = await Promise.all(\n        pokeList.results.map(async (poke) => {  \n          let pokeSpecies = await state.pokedex.getPokemonSpeciesByName(poke.name)\n          let tradName = await dispatch('findNameByLang', pokeSpecies.names)\n          return { id: pokeSpecies.id, name: poke.name, traduction: tradName }\n        })\n      )\n      commit('SETUP_CACHE_NAMES', nameList)\n    },\n    findNameByLang({ state }, names) {\n      let i = 0\n      while(!(names[i].language.name === state.language)) {\n        i++\n      }\n      return names[i].name\n    },\n    async createPokemon({ state, dispatch }, name) {\n      const pokemon = {}\n      const poke = await state.pokedex.getPokemonByName(name)\n      const pokeSpecies = await state.pokedex.getPokemonSpeciesByName(name)\n\n      // id\n      const id = poke.id\n      pokemon.id = id\n      // name\n      pokemon.name = await dispatch('findNameByLang', pokeSpecies.names)\n      // types\n      const types = []\n      for (const type of poke.types) {\n        let t = await state.pokedex.getTypeByName(type.type.name)\n        let tname = await dispatch('findNameByLang', t.names)\n        types.push(tname)\n      }\n      pokemon.types = types\n      // color\n      const color = state.colors[poke.types[0].type.name]\n      pokemon.color = color\n      // image\n      const image = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/dream-world/${id}.svg`\n      pokemon.image = image\n\n      return pokemon\n    },\n    async generatePokemons({ state, commit, dispatch }) {\n      const pokeList = await state.pokedex.getPokemonSpeciesList(state.interval)\n      const pokemons = await Promise.all(\n        pokeList.results.map(async (pokemon) => {  return await dispatch('createPokemon', pokemon.name)})\n      )\n\n      commit('PUSH_POKEMONS', pokemons)\n      commit('UPDATE_INTERVALE')\n    },\n    async generatePokemonsBySearch({ state, commit, dispatch }, search) {\n      commit('RESET_INTERVALE')\n      commit('SETUP', {data: state.pokemons, value: []})\n      // commit('EMPTY_POKEMONS')\n      commit('PUSH_MATCHS', [])\n\n      if (!(search === '')) {\n        const filterNameList = state.cacheNameList.filter((poke) => {\n          return poke.traduction.toLowerCase().includes(search.toLowerCase()) || parseInt(search) === poke.id\n        })\n        const pokemons = await Promise.all(\n          filterNameList.map(async (poke) => {  return await dispatch('createPokemon', poke.name)})\n        )\n\n        commit('PUSH_POKEMONS', pokemons)\n      } else {\n        dispatch('generatePokemons')\n      }\n    },\n    async generateMatchsPokemons({commit, state }, search) {\n      if (search === '') {\n        commit('PUSH_MATCHS', [])\n      } else {\n        let matched = 0\n        const matchs = state.cacheNameList.filter((name) => {\n          return name.traduction.toLowerCase().includes(search.toLowerCase()) && matched++ < 10\n        })\n\n        commit('PUSH_MATCHS', matchs)\n      }\n    }\n  },\n  modules: {\n  }\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}