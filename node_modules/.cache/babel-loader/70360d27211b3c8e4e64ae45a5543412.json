{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { generate } from '@vue/compiler-core';\nimport { createStore } from 'vuex';\nexport default createStore({\n  state() {\n    return {\n      pokedex: new (require(\"pokeapi-js-wrapper\").Pokedex)({\n        cacheImages: true\n      }),\n      interval: {\n        offset: 0,\n        limit: 10\n      },\n      pokemons: [],\n      matchedNames: [],\n      colors: {\n        normal: '#A8A77A',\n        fire: '#EE8130',\n        water: '#6390F0',\n        electric: '#F7D02C',\n        grass: '#7AC74C',\n        ice: '#96D9D6',\n        fighting: '#C22E28',\n        poison: '#A33EA1',\n        ground: '#E2BF65',\n        flying: '#A98FF3',\n        psychic: '#F95587',\n        bug: '#A6B91A',\n        rock: '#B6A136',\n        ghost: '#735797',\n        dragon: '#6F35FC',\n        dark: '#705746',\n        steel: '#B7B7CE',\n        fairy: '#D685AD'\n      },\n      currentPokemon: []\n    };\n  },\n  getters: {},\n  mutations: {\n    INIT_INTERVALE(state) {\n      state.interval.offset = 0;\n      state.interval.limit = 10;\n    },\n    UPDATE_INTERVALE(state) {\n      state.interval.offset += state.interval.limit;\n    },\n    EMPTY_POKEMONS(state) {\n      state.pokemons = [];\n    },\n    PUSH_POKEMONS(state, pokemons) {\n      state.pokemons.push(...pokemons);\n    },\n    PUSH_CURRENT_POKEMON(state, pokemon) {\n      state.currentPokemon = [pokemon];\n    },\n    UPDATE_MATCHED_NAMES(state, names) {\n      state.matchedNames = names;\n    },\n    EMPTY_MATCHED_NAMES(state) {\n      state.matchedNames = [];\n    }\n  },\n  actions: {\n    async createPokemon({\n      commit,\n      state\n    }, {\n      nameList,\n      lang\n    }) {\n      const pokemon = {};\n      for (const name of nameList) {\n        let poke = await state.pokedex.getPokemonByName(name);\n        let pokeSpecies = await state.pokedex.getPokemonSpeciesByName(name);\n\n        // id\n        let id = poke.id;\n        pokemon.setAttribute(\"id\", id);\n        // name\n        let n = pokeSpecies.names[lang].name;\n        pokemon.setAttribute(\"name\", n);\n        // types\n        let types = [];\n        for (const type of poke.types) {\n          let t = await state.pokedex.getTypeByName(type.type.name);\n          let tname = t.names[lang].name;\n          types.push(tname);\n        }\n        pokemon.setAttribute(\"types\", types);\n        // color\n        let color = state.colors[types[0]];\n        pokemon.setAttribute(\"color\", color);\n        // image\n        let image = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/dream-world/${id}.svg`;\n        pokemon.setAttribute(\"image\", image);\n\n        // add pokemon to pokemons\n        commit('PUSH_POKEMONS', pokemon);\n      }\n    },\n    async generatePokemons({\n      state,\n      dispatch\n    }) {\n      const pokeList = await state.pokedex.getPokemonsList();\n      const nameList = await Promise.all(pokeList.results.map(pokemon => {\n        return pokemon.name;\n      }));\n      const lang = 4; // fr,\n      dispatch('createPokemon', {\n        nameList,\n        lang\n      });\n    },\n    async addPokemons({\n      commit,\n      state\n    }, {\n      reset,\n      search\n    }) {\n      let result = [];\n      if (reset) {\n        commit('INIT_INTERVALE');\n        commit('EMPTY_POKEMONS');\n      }\n      if (search === null || search === '') {\n        const pokemons = await state.pokedex.getPokemonsList(state.interval);\n        result = await Promise.all(pokemons.results.map(pokemon => {\n          return state.pokedex.getPokemonByName(pokemon.name);\n        }));\n        commit('UPDATE_INTERVALE');\n      } else {\n        const pokemons = await state.pokedex.getPokemonsList();\n        const names = await Promise.all(pokemons.results.map(pokemon => {\n          return pokemon.name;\n        }));\n        const filteredNames = names.filter(name => {\n          return name.includes(search);\n        });\n        for (const name of filteredNames) {\n          const pokemon = await state.pokedex.getPokemonByName(name);\n          result.push(pokemon);\n        }\n      }\n      commit('PUSH_POKEMONS', result);\n    },\n    async addCurrentPokemon({\n      commit,\n      state\n    }, search) {\n      const pokemon = await state.pokedex.getPokemonByName(search);\n      commit('PUSH_CURRENT_POKEMON', pokemon);\n      commit('UPDATE_MATCHED_NAMES', []);\n    },\n    async matchPokemons({\n      commit,\n      state\n    }, search) {\n      let matched = 0;\n      const pokemons = await state.pokedex.getPokemonsList();\n      const names = await Promise.all(pokemons.results.map(pokemon => {\n        return pokemon.name;\n      }));\n      const filteredNames = names.filter(name => {\n        return name.includes(search) && matched++ < 10;\n      });\n      commit('UPDATE_MATCHED_NAMES', filteredNames);\n    },\n    emptyMatchedNames({\n      commit\n    }) {\n      commit('EMPTY_MATCHED_NAMES');\n    }\n  },\n  modules: {}\n});","map":{"version":3,"names":["generate","createStore","state","pokedex","require","Pokedex","cacheImages","interval","offset","limit","pokemons","matchedNames","colors","normal","fire","water","electric","grass","ice","fighting","poison","ground","flying","psychic","bug","rock","ghost","dragon","dark","steel","fairy","currentPokemon","getters","mutations","INIT_INTERVALE","UPDATE_INTERVALE","EMPTY_POKEMONS","PUSH_POKEMONS","push","PUSH_CURRENT_POKEMON","pokemon","UPDATE_MATCHED_NAMES","names","EMPTY_MATCHED_NAMES","actions","createPokemon","commit","nameList","lang","name","poke","getPokemonByName","pokeSpecies","getPokemonSpeciesByName","id","setAttribute","n","types","type","t","getTypeByName","tname","color","image","generatePokemons","dispatch","pokeList","getPokemonsList","Promise","all","results","map","addPokemons","reset","search","result","filteredNames","filter","includes","addCurrentPokemon","matchPokemons","matched","emptyMatchedNames","modules"],"sources":["/home/pierrots/Polytech/WOA/js/lab4/pokedex/src/store/index.js"],"sourcesContent":["import { generate } from '@vue/compiler-core'\nimport { createStore } from 'vuex'\n\nexport default createStore({\n  state() {\n    return {\n        pokedex: new (require(\"pokeapi-js-wrapper\")).Pokedex({ cacheImages: true }),\n        interval: { offset: 0, limit: 10 },\n        pokemons: [],\n        matchedNames: [],\n        colors: {\n            normal: '#A8A77A',\n            fire: '#EE8130',\n            water: '#6390F0',\n            electric: '#F7D02C',\n            grass: '#7AC74C',\n            ice: '#96D9D6',\n            fighting: '#C22E28',\n            poison: '#A33EA1',\n            ground: '#E2BF65',\n            flying: '#A98FF3',\n            psychic: '#F95587',\n            bug: '#A6B91A',\n            rock: '#B6A136',\n            ghost: '#735797',\n            dragon: '#6F35FC',\n            dark: '#705746',\n            steel: '#B7B7CE',\n            fairy: '#D685AD'\n        },\n        currentPokemon: []  \n    }\n  },\n  getters: {\n  },\n  mutations: {\n    INIT_INTERVALE(state) {\n      state.interval.offset = 0\n      state.interval.limit = 10\n    },\n    UPDATE_INTERVALE(state) {\n      state.interval.offset += state.interval.limit\n    },\n    EMPTY_POKEMONS(state) {\n      state.pokemons = []\n    },\n    PUSH_POKEMONS(state, pokemons) {\n      state.pokemons.push(...pokemons) \n    },\n    PUSH_CURRENT_POKEMON(state, pokemon) {\n      state.currentPokemon = [pokemon]\n    },\n    UPDATE_MATCHED_NAMES(state, names) {\n      state.matchedNames = names\n    },\n    EMPTY_MATCHED_NAMES(state) {\n      state.matchedNames = []\n    }\n  },\n  actions: {\n    async createPokemon({ commit, state }, { nameList, lang }) {\n      const pokemon = {}\n      for (const name of nameList) {\n        let poke = await state.pokedex.getPokemonByName(name)\n        let pokeSpecies = await state.pokedex.getPokemonSpeciesByName(name)\n\n        // id\n        let id = poke.id\n        pokemon.setAttribute(\"id\", id)\n        // name\n        let n = pokeSpecies.names[lang].name\n        pokemon.setAttribute(\"name\", n)\n        // types\n        let types = []\n        for (const type of poke.types) {\n          let t = await state.pokedex.getTypeByName(type.type.name)\n          let tname = t.names[lang].name\n          types.push(tname)\n        }\n        pokemon.setAttribute(\"types\", types)\n        // color\n        let color = state.colors[types[0]]\n        pokemon.setAttribute(\"color\", color)\n        // image\n        let image = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/dream-world/${id}.svg`\n        pokemon.setAttribute(\"image\", image)\n\n        // add pokemon to pokemons\n        commit('PUSH_POKEMONS', pokemon)\n      }\n    },\n    async generatePokemons({ state, dispatch }) {\n      const pokeList = await state.pokedex.getPokemonsList()\n      const nameList = await Promise.all(\n        pokeList.results.map((pokemon) => {  return pokemon.name})\n      )\n      const lang = 4    // fr,\n      dispatch('createPokemon', { nameList, lang })\n    },\n    async addPokemons({ commit, state }, { reset, search }) {\n      let result = []\n      if (reset) {\n        commit('INIT_INTERVALE')\n        commit('EMPTY_POKEMONS')\n      }\n      if (search === null || search === '') {\n        const pokemons = await state.pokedex.getPokemonsList(state.interval)\n        result = await Promise.all(\n          pokemons.results.map((pokemon) => {  return state.pokedex.getPokemonByName(pokemon.name)})\n        )\n        commit('UPDATE_INTERVALE')\n      } else {\n        const pokemons = await state.pokedex.getPokemonsList()\n        const names = await Promise.all(\n          pokemons.results.map((pokemon) => {  return pokemon.name})\n        )\n        const filteredNames = names.filter((name) => {\n          return name.includes(search)\n        })\n        for (const name of filteredNames) {\n          const pokemon = await state.pokedex.getPokemonByName(name)\n          result.push(pokemon)\n        }\n      }\n      commit('PUSH_POKEMONS', result) \n    },\n    async addCurrentPokemon({commit, state }, search) {\n      const pokemon = await state.pokedex.getPokemonByName(search)\n      commit('PUSH_CURRENT_POKEMON', pokemon)\n      commit('UPDATE_MATCHED_NAMES', [])\n    },\n    async matchPokemons({commit, state }, search) {\n      let matched = 0\n      const pokemons = await state.pokedex.getPokemonsList()\n      const names = await Promise.all(\n        pokemons.results.map((pokemon) => {  return pokemon.name})\n      )\n      const filteredNames = names.filter((name) => {\n        return name.includes(search) && matched++ < 10\n      })\n      commit('UPDATE_MATCHED_NAMES', filteredNames)\n    },\n    emptyMatchedNames({commit}) {\n      commit('EMPTY_MATCHED_NAMES')\n    }\n  },\n  modules: {\n  }\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}