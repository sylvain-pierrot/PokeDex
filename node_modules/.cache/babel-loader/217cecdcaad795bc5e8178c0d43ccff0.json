{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n// import { generate } from '@vue/compiler-core'\nimport { createStore } from 'vuex';\nexport default createStore({\n  state() {\n    return {\n      language: \"fr\",\n      pokedex: new (require(\"pokeapi-js-wrapper\").Pokedex)({\n        cacheImages: true\n      }),\n      interval: {\n        offset: 0,\n        limit: 10\n      },\n      pokemons: [],\n      matchs: [],\n      colors: {\n        normal: '#A8A77A',\n        fire: '#EE8130',\n        water: '#6390F0',\n        electric: '#F7D02C',\n        grass: '#7AC74C',\n        ice: '#96D9D6',\n        fighting: '#C22E28',\n        poison: '#A33EA1',\n        ground: '#E2BF65',\n        flying: '#A98FF3',\n        psychic: '#F95587',\n        bug: '#A6B91A',\n        rock: '#B6A136',\n        ghost: '#735797',\n        dragon: '#6F35FC',\n        dark: '#705746',\n        steel: '#B7B7CE',\n        fairy: '#D685AD'\n      }\n      // currentPokemon: []  \n    };\n  },\n\n  getters: {},\n  mutations: {\n    RESET_INTERVALE(state) {\n      state.interval.offset = 0;\n      state.interval.limit = 10;\n    },\n    UPDATE_INTERVALE(state) {\n      state.interval.offset += state.interval.limit;\n    },\n    EMPTY_POKEMONS(state) {\n      state.pokemons = [];\n    },\n    EMPTY_MATCHS(state) {\n      state.matchs = [];\n    },\n    PUSH_POKEMON(state, pokemon) {\n      state.pokemons.push(pokemon);\n    },\n    PUSH_CURRENT_POKEMON(state, pokemon) {\n      state.currentPokemon = [pokemon];\n    },\n    PUSH_MATCHS(state, matchs) {\n      state.matchs = matchs;\n    }\n  },\n  actions: {\n    findNameByLang({}, {\n      names,\n      lang\n    }) {\n      let i = 0;\n      while (!(names[i].language.name === lang)) {\n        i++;\n      }\n      return names[i].name;\n    },\n    async createPokemon({\n      commit,\n      state,\n      dispatch\n    }, {\n      nameList,\n      lang\n    }) {\n      const pokemon = {};\n      for (const name of nameList) {\n        let poke = await state.pokedex.getPokemonByName(name);\n        let pokeSpecies = await state.pokedex.getPokemonSpeciesByName(name);\n\n        // id\n        let id = poke.id;\n        pokemon.id = id;\n        // name\n        pokemon.name = await dispatch('findNameByLang', {\n          names: pokeSpecies.names,\n          lang: lang\n        });\n        // types\n        let types = [];\n        for (const type of poke.types) {\n          let t = await state.pokedex.getTypeByName(type.type.name);\n          let tname = await dispatch('findNameByLang', {\n            names: t.names,\n            lang: lang\n          });\n          types.push(tname);\n        }\n        pokemon.types = types;\n        // color\n        let color = state.colors[poke.types[0].type.name];\n        pokemon.color = color;\n        // image\n        let image = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/dream-world/${id}.svg`;\n        pokemon.image = image;\n\n        // add pokemon to pokemons\n        commit('PUSH_POKEMON', pokemon);\n      }\n    },\n    async generatePokemons({\n      state,\n      commit,\n      dispatch\n    }) {\n      const pokeList = await state.pokedex.getPokemonSpeciesList(state.interval);\n      const nameList = await Promise.all(pokeList.results.map(pokemon => {\n        return pokemon.name;\n      }));\n      const lang = state.language; // français\n      dispatch('createPokemon', {\n        nameList: nameList,\n        lang: lang\n      });\n      commit('UPDATE_INTERVALE');\n    },\n    async generatePokemonsBySearch({\n      state,\n      commit,\n      dispatch\n    }, search) {\n      commit('RESET_INTERVALE');\n      commit('EMPTY_POKEMONS');\n      if (search === '') {\n        dispatch('generatePokemons');\n      } else {\n        const pokeList = await state.pokedex.getPokemonSpeciesList();\n        const nameList = await Promise.all(pokeList.results.map(pokemon => {\n          return pokemon.name;\n        }));\n        const filterNameList = nameList.filter(name => {\n          return name.includes(search);\n        });\n        const lang = state.language; // français\n        dispatch('createPokemon', {\n          nameList: filterNameList,\n          lang: lang\n        });\n      }\n    },\n    async generateMatchsPokemons({\n      commit,\n      state,\n      dispatch\n    }, search) {\n      // let matched = 0\n      if (search === '') {\n        commit('EMPTY_MATCHS');\n      } else {\n        const pokeList = await state.pokedex.getPokemonSpeciesList();\n        const nameList = await Promise.all(pokeList.results.map(pokemon => {\n          return pokemon.name;\n        }));\n        const lang = state.language; // français\n        const matchs = [];\n        for (const name of nameList) {\n          let pokeSpecies = await state.pokedex.getPokemonSpeciesByName(name);\n          let tradName = await dispatch('findNameByLang', {\n            names: pokeSpecies.names,\n            lang: lang\n          });\n          if (tradName.toLowerCase().includes(search)) {\n            matchs.push({\n              name: name,\n              traduction: tradName\n            });\n          }\n        }\n        commit('PUSH_MATCHS', matchs);\n      }\n    }\n  },\n  modules: {}\n});","map":{"version":3,"names":["createStore","state","language","pokedex","require","Pokedex","cacheImages","interval","offset","limit","pokemons","matchs","colors","normal","fire","water","electric","grass","ice","fighting","poison","ground","flying","psychic","bug","rock","ghost","dragon","dark","steel","fairy","getters","mutations","RESET_INTERVALE","UPDATE_INTERVALE","EMPTY_POKEMONS","EMPTY_MATCHS","PUSH_POKEMON","pokemon","push","PUSH_CURRENT_POKEMON","currentPokemon","PUSH_MATCHS","actions","findNameByLang","names","lang","i","name","createPokemon","commit","dispatch","nameList","poke","getPokemonByName","pokeSpecies","getPokemonSpeciesByName","id","types","type","t","getTypeByName","tname","color","image","generatePokemons","pokeList","getPokemonSpeciesList","Promise","all","results","map","generatePokemonsBySearch","search","filterNameList","filter","includes","generateMatchsPokemons","tradName","toLowerCase","traduction","modules"],"sources":["/home/pierrots/Polytech/WOA/js/lab4/pokedex/src/store/index.js"],"sourcesContent":["// import { generate } from '@vue/compiler-core'\nimport { createStore } from 'vuex'\n\nexport default createStore({\n  state() {\n    return {\n      language: \"fr\",\n      pokedex: new (require(\"pokeapi-js-wrapper\")).Pokedex({ cacheImages: true }),\n      interval: { offset: 0, limit: 10 },\n      pokemons: [],\n      matchs: [],\n      colors: {\n          normal: '#A8A77A',\n          fire: '#EE8130',\n          water: '#6390F0',\n          electric: '#F7D02C',\n          grass: '#7AC74C',\n          ice: '#96D9D6',\n          fighting: '#C22E28',\n          poison: '#A33EA1',\n          ground: '#E2BF65',\n          flying: '#A98FF3',\n          psychic: '#F95587',\n          bug: '#A6B91A',\n          rock: '#B6A136',\n          ghost: '#735797',\n          dragon: '#6F35FC',\n          dark: '#705746',\n          steel: '#B7B7CE',\n          fairy: '#D685AD'\n      },\n      // currentPokemon: []  \n    }\n  },\n  getters: {\n  },\n  mutations: {\n    RESET_INTERVALE(state) {\n      state.interval.offset = 0\n      state.interval.limit = 10\n    },\n    UPDATE_INTERVALE(state) {\n      state.interval.offset += state.interval.limit\n    },\n    EMPTY_POKEMONS(state) {\n      state.pokemons = []\n    },\n    EMPTY_MATCHS(state) {\n      state.matchs = []\n    },\n    PUSH_POKEMON(state, pokemon) {\n      state.pokemons.push(pokemon) \n    },\n    PUSH_CURRENT_POKEMON(state, pokemon) {\n      state.currentPokemon = [pokemon]\n    },\n    PUSH_MATCHS(state, matchs) {\n      state.matchs = matchs\n    }\n  },\n  actions: {\n    findNameByLang({}, { names, lang }) {\n      let i = 0\n      while(!(names[i].language.name === lang)) {\n        i++\n      }\n      return names[i].name\n    },\n    async createPokemon({ commit, state, dispatch }, { nameList, lang }) {\n      const pokemon = {}\n      for (const name of nameList) {\n        let poke = await state.pokedex.getPokemonByName(name)\n        let pokeSpecies = await state.pokedex.getPokemonSpeciesByName(name)\n\n        // id\n        let id = poke.id\n        pokemon.id = id\n        // name\n        pokemon.name = await dispatch('findNameByLang', { names: pokeSpecies.names, lang: lang })\n        // types\n        let types = []\n        for (const type of poke.types) {\n          let t = await state.pokedex.getTypeByName(type.type.name)\n          let tname = await dispatch('findNameByLang', { names: t.names, lang: lang })\n          types.push(tname)\n        }\n        pokemon.types = types\n        // color\n        let color = state.colors[poke.types[0].type.name]\n        pokemon.color = color\n        // image\n        let image = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/dream-world/${id}.svg`\n        pokemon.image = image\n\n        // add pokemon to pokemons\n        commit('PUSH_POKEMON', pokemon)\n      }\n    },\n    async generatePokemons({ state, commit, dispatch }) {\n      const pokeList = await state.pokedex.getPokemonSpeciesList(state.interval)\n      const nameList = await Promise.all(\n        pokeList.results.map((pokemon) => {  return pokemon.name})\n      )\n      const lang = state.language    // français\n      dispatch('createPokemon', { nameList: nameList, lang: lang })\n      commit('UPDATE_INTERVALE')\n    },\n    async generatePokemonsBySearch({ state, commit, dispatch }, search) {\n      commit('RESET_INTERVALE')\n      commit('EMPTY_POKEMONS')\n      if (search === '') {\n        dispatch('generatePokemons')\n      } else {\n        const pokeList = await state.pokedex.getPokemonSpeciesList()\n        const nameList = await Promise.all(\n          pokeList.results.map((pokemon) => {  return pokemon.name})\n        )\n        const filterNameList = nameList.filter((name) => {\n          return name.includes(search)\n        })\n        const lang = state.language    // français\n        dispatch('createPokemon', { nameList: filterNameList, lang: lang })\n        }\n    },\n    async generateMatchsPokemons({commit, state, dispatch }, search) {\n      // let matched = 0\n      if (search === '') {\n        commit('EMPTY_MATCHS')\n      } else {\n        const pokeList = await state.pokedex.getPokemonSpeciesList()\n        const nameList = await Promise.all(\n          pokeList.results.map((pokemon) => {  return pokemon.name})\n        )\n        const lang = state.language     // français\n        const matchs = []\n        for (const name of nameList) {\n          let pokeSpecies = await state.pokedex.getPokemonSpeciesByName(name)\n          let tradName = await dispatch('findNameByLang', { names: pokeSpecies.names, lang: lang })\n          if (tradName.toLowerCase().includes(search)) {\n            matchs.push({ name: name, traduction: tradName })\n          }\n        }\n        commit('PUSH_MATCHS', matchs)\n      }\n    }\n  },\n  modules: {\n  }\n})\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}